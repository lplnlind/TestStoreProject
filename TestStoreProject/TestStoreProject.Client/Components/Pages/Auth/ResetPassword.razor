@page "/reset-password"
@inject NavigationManager NavigationManager
@inject IAuthClient AuthClient

<MudPaper Class="p-6 mx-auto mt-10" Style="max-width: 400px;">
    <MudText Typo="Typo.h5" Class="mb-4">بازیابی رمز عبور</MudText>

    <MudTextField Label="رمز عبور جدید" @bind-Value="_model.NewPassword" InputType="InputType.Password" Required="true" />
    <MudTextField Label="تکرار رمز عبور" @bind-Value="_model.ConfirmPassword" InputType="InputType.Password" Required="true" />

    <MudButton OnClick="Reset" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">تغییر رمز عبور</MudButton>

    @if (!string.IsNullOrEmpty(_message))
    {
        <MudText Class="mt-2" Color="Color.Success">@_message</MudText>
        <MudText Class="mt-4">
            <MudLink Href="/login">ورود به حساب کاربری</MudLink>
        </MudText>
    }
    <MudText Class="mt-4">
        <MudLink Href="/login">بازگشت به ورود</MudLink>
    </MudText>
</MudPaper>

@code {
    private ResetPasswordRequest _model = new();
    private string? _message;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("token", out var token))
        {
            _model.Token = token!;
        }
        if (query.TryGetValue("email", out var email))
        {
            _model.Email = email!;
        }
    }

    private async Task Reset()
    {
        var result = await AuthClient.ResetPasswordAsync(_model);
        if (result)
        {
            _message = "رمز عبور با موفقیت تغییر یافت.";
        }
        else
        {
            _message = "خطایی رخ داده است.";
        }
    }
}
