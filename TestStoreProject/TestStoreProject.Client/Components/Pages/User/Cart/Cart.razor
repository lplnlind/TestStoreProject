@page "/cart"
@inject ICartClient CartClient

<PageTitle>سبد خرید</PageTitle>

<h3>🛒 سبد خرید شما</h3>

@if (cart is null)
{
    <p>در حال بارگذاری...</p>
}
else if (!cart.Items.Any())
{
    <p>سبد خرید شما خالی است.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>محصول</th>
                <th>قیمت واحد</th>
                <th>تعداد</th>
                <th>جمع</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cart.Items)
            {
                <tr>
                    <td>@item.ProductName</td>
                    <td>@item.UnitPrice تومان</td>
                    <td>@item.Quantity</td>
                    <td>@(item.Quantity * item.UnitPrice) تومان</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item.ProductId)">❌ حذف</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h5>جمع کل: <strong>@cart.TotalPrice تومان</strong></h5>

    <button class="btn btn-warning" @onclick="ClearCart">🗑️ پاک‌سازی سبد</button>
}

@code {
    private CartDto? cart;

    protected override async Task OnInitializedAsync()
    {
        cart = await CartClient.GetCartAsync();
    }

    private async Task RemoveItem(int productId)
    {
        await CartClient.RemoveItemAsync(productId);
        cart = await CartClient.GetCartAsync();
    }

    private async Task ClearCart()
    {
        await CartClient.ClearAsync();
        cart = await CartClient.GetCartAsync();
    }
}
