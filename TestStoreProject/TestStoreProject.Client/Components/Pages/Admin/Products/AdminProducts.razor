@page "/admin/products"
@attribute [Authorize(Roles ="admin")]
@inject IProductClient ProductClient
@inject IDialogService DialogService

<PageTitle>مدیریت محصولات</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="p-4 mt-10 rounded-xl">
        <MudTable Class="rounded-xl" Items="_product" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">لیست محصولات</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OpenAddDialog" Class="ma-1 pa-2"></MudIconButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>شناسه</MudTh>
                <MudTh>نام</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="شناسه">@context.Id</MudTd>
                <MudTd DataLabel="نام">
                    <MudStack Spacing="0">
                        <MudText>@context.Name</MudText>
                        <MudText Typo="Typo.caption">تعداد محصولات: 20</MudText>
                    </MudStack>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => OpenEditDialog(context))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => OpenDeleteDialog(context))"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>


@code {
    private List<ProductDto> _product = new();
    private ProductDialog? _productDialog;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task OpenDeleteDialog(ProductDto product)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, CloseButton = true };
        var parameters = new DialogParameters<ProductDialog>
        {
            { x => x.Product, product },
            { x => x.ButtonText, "حذف"},
            { x => x.Color, Color.Error},
            { x => x.IsDisable, true}
        };

        var dialog = await DialogService.ShowAsync<ProductDialog>("حذف محصول", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                await ProductClient.DeleteAsync(product.Id);
                await LoadProducts();
            }
    }

    private async Task OpenAddDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, CloseButton = true };
        var parameters = new DialogParameters<ProductDialog>
        {
            { x => x.ButtonText, "ثبت"},
            { x => x.Color, Color.Primary}
        };

        var dialog = await DialogService.ShowAsync<ProductDialog>("ثبت محصول", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                if (result.Data is not null)
                {
                    ProductDto product = (ProductDto)result.Data;
                    await ProductClient.CreateAsync(product);
                    await LoadProducts();
                }
            }
    }

    private async Task OpenEditDialog(ProductDto product)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, CloseButton = true };
        var parameters = new DialogParameters<ProductDialog>
        {
            { x => x.Product, product },
            { x => x.ButtonText, "ویرایش"},
            { x => x.Color, Color.Primary}
        };

        var dialog = await DialogService.ShowAsync<ProductDialog>("ویرایش محصول", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
            if (!result.Canceled)
            {
                if (result.Data is not null)
                {
                    ProductDto productEdit = (ProductDto)result.Data;
                    await ProductClient.UpdateAsync(productEdit);
                    await LoadProducts();
                }
            }
    }

    private async Task LoadProducts() =>
        _product = (await ProductClient.GetAllAsync()).ToList();
}